// StayBoost AI Template Generation Tests
import assert from 'node:assert';
import { after, before, describe, test } from 'node:test';
import prisma from '../app/db.server.js';

describe('🤖 StayBoost AI Template Generation', () => {
  
  before(async () => {
    // Clean up any existing test data
    await prisma.analyticsEvent.deleteMany({
      where: { shop: { contains: 'ai-test' } }
    });
    await prisma.popupTemplate.deleteMany({
      where: { shop: { contains: 'ai-test' } }
    });
  });

  after(async () => {
    // Clean up test data
    await prisma.analyticsEvent.deleteMany({
      where: { shop: { contains: 'ai-test' } }
    });
    await prisma.popupTemplate.deleteMany({
      where: { shop: { contains: 'ai-test' } }
    });
  });

  describe('🏗️ AI Infrastructure', () => {
    test('should have AI templates API route', async () => {
      const fs = await import('fs');
      const apiFile = '/Users/incognitolab/My project/Stayboost/app/routes/api.ai-templates.jsx';
      assert.ok(fs.existsSync(apiFile), 'AI Templates API route should exist');
    });

    test('should have AI templates frontend route', async () => {
      const fs = await import('fs');
      const frontendFile = '/Users/incognitolab/My project/Stayboost/app/routes/app.ai-templates.jsx';
      assert.ok(fs.existsSync(frontendFile), 'AI Templates frontend route should exist');
    });

    test('should support AI-generated template types in database', async () => {
      const aiTemplate = await prisma.popupTemplate.create({
        data: {
          shop: 'ai-test-generated.myshopify.com',
          name: 'AI Generated Test Template',
          description: 'This template was generated by AI',
          category: 'sales',
          templateType: 'ai_generated',
          config: JSON.stringify({
            title: 'AI Generated Popup',
            message: 'This popup was created by artificial intelligence',
            backgroundColor: '#ffffff',
            buttonColor: '#007cba'
          }),
          isPublic: false,
          tags: JSON.stringify(['ai-generated', 'test', 'sales'])
        }
      });

      assert.ok(aiTemplate.id, 'Should create AI generated template');
      assert.strictEqual(aiTemplate.templateType, 'ai_generated', 'Template type should be ai_generated');
    });
  });

  describe('🎯 AI Template Generation', () => {
    test('should generate templates with different industry configurations', async () => {
      const industries = ['fashion', 'technology', 'food'];
      const templates = [];

      for (const industry of industries) {
        const template = await prisma.popupTemplate.create({
          data: {
            shop: `ai-test-${industry}.myshopify.com`,
            name: `AI Generated: ${industry} Template`,
            description: `AI-optimized template for ${industry} industry`,
            category: 'sales',
            templateType: 'ai_generated',
            config: JSON.stringify({
              title: `${industry.charAt(0).toUpperCase() + industry.slice(1)} Special`,
              message: `Best deals for ${industry}`,
              industry: industry
            }),
            tags: JSON.stringify(['ai-generated', industry])
          }
        });
        templates.push(template);
      }

      assert.strictEqual(templates.length, 3, 'Should generate templates for all industries');
      
      // Verify industry-specific configurations
      const fashionTemplate = templates.find(t => t.tags.includes('fashion'));
      assert.ok(fashionTemplate, 'Should have fashion template');
      
      const techTemplate = templates.find(t => t.tags.includes('technology'));
      assert.ok(techTemplate, 'Should have technology template');
    });

    test('should generate templates with different goal optimizations', async () => {
      const goals = ['conversion', 'email_capture', 'retention'];
      const templates = [];

      for (const goal of goals) {
        const template = await prisma.popupTemplate.create({
          data: {
            shop: `ai-test-goal-${goal}.myshopify.com`,
            name: `AI Optimized: ${goal}`,
            description: `Template optimized for ${goal}`,
            category: mapGoalToCategory(goal),
            templateType: 'ai_generated',
            config: JSON.stringify({
              title: 'AI Optimized Popup',
              message: `Optimized for ${goal}`,
              goal: goal
            })
          }
        });
        templates.push(template);
      }

      assert.strictEqual(templates.length, 3, 'Should generate templates for all goals');
      
      // Verify goal-specific categories
      const conversionTemplate = templates.find(t => t.name.includes('conversion'));
      assert.strictEqual(conversionTemplate.category, 'sales', 'Conversion template should be sales category');
      
      const emailTemplate = templates.find(t => t.name.includes('email_capture'));
      assert.strictEqual(emailTemplate.category, 'newsletter', 'Email capture template should be newsletter category');
    });

    test('should track AI generation analytics', async () => {
      const shop = 'ai-test-analytics.myshopify.com';
      
      // Create AI template
      const template = await prisma.popupTemplate.create({
        data: {
          shop,
          name: 'AI Analytics Test',
          description: 'Template for testing AI analytics',
          category: 'exit_intent',
          templateType: 'ai_generated',
          config: JSON.stringify({
            title: 'Analytics Test',
            message: 'Testing AI analytics'
          })
        }
      });

      // Log AI generation event
      await prisma.analyticsEvent.create({
        data: {
          shop,
          eventType: 'ai_template_generated',
          metadata: JSON.stringify({
            templateId: template.id,
            prompt: 'test prompt',
            industry: 'technology',
            goal: 'conversion',
            style: 'modern'
          })
        }
      });

      const events = await prisma.analyticsEvent.findMany({
        where: {
          shop,
          eventType: 'ai_template_generated'
        }
      });

      assert.ok(events.length > 0, 'Should track AI generation events');
      
      const event = events[0];
      const metadata = JSON.parse(event.metadata);
      assert.strictEqual(metadata.templateId, template.id, 'Should track template ID');
      assert.strictEqual(metadata.goal, 'conversion', 'Should track generation goal');
    });
  });

  describe('🎨 Template Optimization', () => {
    test('should create optimized template variations', async () => {
      // Create base template
      const baseTemplate = await prisma.popupTemplate.create({
        data: {
          shop: 'ai-test-optimization.myshopify.com',
          name: 'Base Template',
          description: 'Template to be optimized',
          category: 'sales',
          templateType: 'custom',
          config: JSON.stringify({
            title: 'Basic Popup',
            message: 'Basic message',
            backgroundColor: '#ffffff',
            buttonColor: '#007cba'
          })
        }
      });

      // Create optimized version
      const optimizedTemplate = await prisma.popupTemplate.create({
        data: {
          shop: 'ai-test-optimization.myshopify.com',
          name: 'Base Template (AI Optimized)',
          description: 'AI-optimized version for conversion_rate',
          category: 'sales',
          templateType: 'ai_optimized',
          config: JSON.stringify({
            title: '🎯 Basic Popup',
            message: 'Basic message',
            backgroundColor: '#ffffff',
            buttonColor: '#dc3545', // High-contrast red
            urgencyTimer: true
          })
        }
      });

      assert.ok(optimizedTemplate.id, 'Should create optimized template');
      assert.strictEqual(optimizedTemplate.templateType, 'ai_optimized', 'Should be marked as AI optimized');
      assert.ok(optimizedTemplate.name.includes('AI Optimized'), 'Should indicate it is AI optimized');

      const optimizedConfig = JSON.parse(optimizedTemplate.config);
      assert.ok(optimizedConfig.title.includes('🎯'), 'Should add performance elements');
      assert.strictEqual(optimizedConfig.buttonColor, '#dc3545', 'Should use high-contrast colors');
      assert.strictEqual(optimizedConfig.urgencyTimer, true, 'Should add urgency elements');
    });

    test('should generate mobile-optimized templates', async () => {
      const mobileTemplate = await prisma.popupTemplate.create({
        data: {
          shop: 'ai-test-mobile.myshopify.com',
          name: 'Mobile Optimized Template',
          description: 'AI-optimized for mobile devices',
          category: 'sales',
          templateType: 'ai_generated',
          config: JSON.stringify({
            title: 'Mobile Special 📱',
            message: 'Exclusive mobile-only offer',
            backgroundColor: '#ffffff',
            buttonColor: '#007cba',
            fontSize: '18px',
            buttonSize: 'large',
            padding: '24px',
            mobileOptimized: true
          })
        }
      });

      const config = JSON.parse(mobileTemplate.config);
      assert.strictEqual(config.mobileOptimized, true, 'Should be marked as mobile optimized');
      assert.strictEqual(config.fontSize, '18px', 'Should have larger font size for mobile');
      assert.strictEqual(config.buttonSize, 'large', 'Should have large buttons for mobile');
      assert.strictEqual(config.padding, '24px', 'Should have appropriate padding for mobile');
    });
  });

  describe('🔍 AI Suggestions System', () => {
    test('should generate performance-based suggestions', async () => {
      // Create templates with usage stats
      const template1 = await prisma.popupTemplate.create({
        data: {
          shop: 'ai-test-suggestions.myshopify.com',
          name: 'High Performing Template',
          description: 'Template with good performance',
          category: 'sales',
          templateType: 'custom',
          config: JSON.stringify({
            title: 'Great Popup',
            message: 'High converting message'
          })
        }
      });

      const template2 = await prisma.popupTemplate.create({
        data: {
          shop: 'ai-test-suggestions.myshopify.com',
          name: 'Low Performing Template',
          description: 'Template with poor performance',
          category: 'sales',
          templateType: 'custom',
          config: JSON.stringify({
            title: 'Poor Popup',
            message: 'Low converting message'
          })
        }
      });

      // Add performance stats
      await prisma.templateUsageStats.create({
        data: {
          templateId: template1.id,
          shop: 'ai-test-suggestions.myshopify.com',
          date: new Date(),
          usageCount: 1,
          impressions: 100,
          conversions: 15, // 15% conversion rate
          conversionRate: 0.15
        }
      });

      await prisma.templateUsageStats.create({
        data: {
          templateId: template2.id,
          shop: 'ai-test-suggestions.myshopify.com',
          date: new Date(),
          usageCount: 1,
          impressions: 100,
          conversions: 3, // 3% conversion rate
          conversionRate: 0.03
        }
      });

      // Mock AI suggestions generation logic
      const templates = await prisma.popupTemplate.findMany({
        where: { shop: 'ai-test-suggestions.myshopify.com' },
        include: { usageStats: true }
      });

      const highPerformingTemplates = templates.filter(template => {
        const stats = template.usageStats || [];
        const avgConversionRate = stats.length > 0 
          ? stats.reduce((sum, stat) => sum + (stat.conversionRate || 0), 0) / stats.length
          : 0;
        return avgConversionRate > 0.1; // 10%+ conversion rate
      });

      assert.ok(highPerformingTemplates.length > 0, 'Should identify high-performing templates');
      assert.ok(highPerformingTemplates.some(t => t.name.includes('High Performing')), 'Should include high-performing template');
    });

    test('should provide industry-specific suggestions', async () => {
      const industries = ['fashion', 'technology', 'food'];
      
      for (const industry of industries) {
        const template = await prisma.popupTemplate.create({
          data: {
            shop: `${industry}-store.myshopify.com`,
            name: `${industry} Template`,
            description: `Template for ${industry} industry`,
            category: 'sales',
            templateType: 'community',
            config: JSON.stringify({
              title: `${industry} Offer`,
              message: `Best ${industry} deals`
            }),
            isPublic: true,
            tags: JSON.stringify([industry]),
            averageRating: 4.5,
            usageCount: 50
          }
        });

        assert.ok(template.id, `Should create ${industry} template`);
      }

      // Test industry detection and template filtering
      const fashionTemplates = await prisma.popupTemplate.findMany({
        where: {
          OR: [
            { tags: { contains: 'fashion' } },
            { category: 'fashion' }
          ],
          isPublic: true
        }
      });

      assert.ok(fashionTemplates.length > 0, 'Should find fashion industry templates');
    });
  });

  describe('📊 Template Analysis', () => {
    test('should analyze template effectiveness', async () => {
      const analysisTest = {
        score: 0,
        insights: [],
        recommendations: []
      };

      // Mock template configuration
      const templateConfig = {
        title: 'Amazing Deal!',
        message: 'Get 20% off your first order',
        backgroundColor: '#ffffff',
        buttonColor: '#007cba',
        mobileOptimized: true,
        urgencyTimer: true
      };

      // Mock analysis logic
      let score = 50; // Base score

      // Analyze title
      if (templateConfig.title && templateConfig.title.includes('!')) {
        analysisTest.insights.push("Good use of excitement in title");
        score += 5;
      }

      // Analyze mobile optimization
      if (templateConfig.mobileOptimized) {
        analysisTest.insights.push("Template is mobile-optimized");
        score += 15;
      }

      // Analyze urgency elements
      if (templateConfig.urgencyTimer) {
        analysisTest.insights.push("Good use of urgency to drive action");
        score += 10;
      }

      analysisTest.score = Math.min(100, Math.max(0, score));

      assert.ok(analysisTest.score > 60, 'Should provide meaningful analysis score');
      assert.ok(analysisTest.insights.length > 0, 'Should provide insights');
      assert.ok(analysisTest.insights.some(insight => insight.includes('mobile-optimized')), 'Should recognize mobile optimization');
      assert.ok(analysisTest.insights.some(insight => insight.includes('urgency')), 'Should recognize urgency elements');
    });

    test('should provide actionable recommendations', async () => {
      const recommendations = [];

      // Mock template without optimization
      const basicTemplate = {
        title: 'Hello',
        message: 'Buy our products',
        backgroundColor: '#ffffff',
        buttonColor: '#cccccc'
      };

      // Generate recommendations
      if (!basicTemplate.mobileOptimized) {
        recommendations.push("Consider optimizing for mobile devices");
      }

      if (!basicTemplate.urgencyTimer && !basicTemplate.countdown) {
        recommendations.push("Add urgency elements to increase conversions");
      }

      if (basicTemplate.title && basicTemplate.title.length < 20) {
        recommendations.push("Title could be more descriptive");
      }

      assert.ok(recommendations.length > 0, 'Should provide recommendations');
      assert.ok(recommendations.some(r => r.includes('mobile')), 'Should recommend mobile optimization');
      assert.ok(recommendations.some(r => r.includes('urgency')), 'Should recommend urgency elements');
    });
  });

  describe('🔄 Template Evolution', () => {
    test('should track AI template generations over time', async () => {
      const shop = 'ai-test-evolution.myshopify.com';
      const generations = [];

      // Create multiple AI template generations
      for (let i = 1; i <= 3; i++) {
        const template = await prisma.popupTemplate.create({
          data: {
            shop,
            name: `AI Template Generation ${i}`,
            description: `AI template version ${i}`,
            category: 'sales',
            templateType: 'ai_generated',
            config: JSON.stringify({
              title: `Generation ${i} Title`,
              message: `This is generation ${i}`,
              version: i
            })
          }
        });

        await prisma.analyticsEvent.create({
          data: {
            shop,
            eventType: 'ai_template_generated',
            metadata: JSON.stringify({
              templateId: template.id,
              generation: i,
              improvements: i > 1 ? ['better_title', 'improved_colors'] : []
            })
          }
        });

        generations.push(template);
      }

      const aiTemplates = await prisma.popupTemplate.findMany({
        where: {
          shop,
          templateType: 'ai_generated'
        },
        orderBy: { createdAt: 'asc' }
      });

      const aiEvents = await prisma.analyticsEvent.findMany({
        where: {
          shop,
          eventType: 'ai_template_generated'
        },
        orderBy: { createdAt: 'asc' }
      });

      assert.strictEqual(aiTemplates.length, 3, 'Should track all AI generations');
      assert.strictEqual(aiEvents.length, 3, 'Should track all generation events');
      
      // Verify evolution progression
      const latestTemplate = aiTemplates[aiTemplates.length - 1];
      const latestConfig = JSON.parse(latestTemplate.config);
      assert.strictEqual(latestConfig.version, 3, 'Should track latest version');
    });
  });
});

// Helper function to map goals to categories
function mapGoalToCategory(goal) {
  const goalMapping = {
    conversion: 'sales',
    email_capture: 'newsletter',
    retention: 'exit_intent',
    upsell: 'upsell',
    announcement: 'announcement'
  };
  return goalMapping[goal] || 'sales';
}
